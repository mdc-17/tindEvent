{"ast":null,"code":"var _jsxFileName = \"/Users/migueldominguezchamorro/Desktop/TindEvent/TindEvent-front/my-app/src/lib/AuthProvider.js\";\nimport React from \"react\";\nimport auth from \"./auth-service\"; // Importamos funciones para llamadas axios a la API\n\nconst {\n  Consumer,\n  Provider\n} = React.createContext(); // HOC para crear Consumer\n// el componente withAuth recibe un componente como argumento y nos devuelve un componente con el mismo componente dentro de un <Consumer /> con las propiedades user e isLoggedin (state), y los métodos login, signup y logout (this)\n\nconst withAuth = WrappedComponent => {\n  return class extends React.Component {\n    render() {\n      return /*#__PURE__*/React.createElement(Consumer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 9\n        }\n      }, ({\n        login,\n        signup,\n        user,\n        logout,\n        isLoggedin\n      }) => {\n        return /*#__PURE__*/React.createElement(WrappedComponent, Object.assign({\n          login: login,\n          signup: signup,\n          user: user,\n          logout: logout,\n          isLoggedin: isLoggedin\n        }, this.props, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 15,\n            columnNumber: 15\n          }\n        }));\n      });\n    }\n\n  };\n}; // Provider\n\n\nclass AuthProvider extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isLoggedin: false,\n      user: null,\n      isLoading: true\n    };\n\n    this.signup = user => {\n      const {\n        picture,\n        username,\n        email,\n        password,\n        location,\n        birthDate,\n        bio\n      } = user;\n      auth.signup({\n        picture,\n        username,\n        email,\n        password,\n        location,\n        birthDate,\n        bio\n      }).then(user => {\n        this.setState({\n          isLoggedin: true,\n          user\n        });\n      }).catch(({\n        response\n      }) => {\n        this.setState({\n          message: response.data.statusMessage\n        });\n      });\n    };\n\n    this.login = user => {\n      const {\n        username,\n        password\n      } = user;\n      auth.login({\n        username,\n        password\n      }).then(user => this.setState({\n        isLoggedin: true,\n        user\n      })).catch(err => console.log(err));\n    };\n\n    this.logout = () => {\n      auth.logout().then(() => this.setState({\n        isLoggedin: false,\n        user: null\n      })).catch(err => console.log(err));\n    };\n  }\n\n  componentDidMount() {\n    // luego de que se monte el componente, llama a auth.me() que nos devuelve el usuario y setea los valores para loguearlo\n    auth.me().then(user => this.setState({\n      isLoggedin: true,\n      user: user,\n      isLoading: false\n    })).catch(err => this.setState({\n      isLoggedin: false,\n      user: null,\n      isLoading: false\n    }));\n  }\n\n  render() {\n    // destructuramos isLoading, isLoggedin y user de this.state y login, logout y signup de this\n    const {\n      isLoading,\n      isLoggedin,\n      user\n    } = this.state;\n    const {\n      login,\n      logout,\n      signup\n    } = this;\n    return isLoading ?\n    /*#__PURE__*/\n    // si está loading, devuelve un <div> y sino devuelve un componente <Provider> con un objeto con los valores: { isLoggedin, user, login, logout, signup}\n    // el objeto pasado en la prop value estará disponible para todos los componentes <Consumer>\n    React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }\n    }, \"Loading\") : /*#__PURE__*/React.createElement(Provider, {\n      value: {\n        isLoggedin,\n        user,\n        login,\n        logout,\n        signup\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }\n    }, this.props.children);\n    /*<Provider> \"value={}\" datos que estarán disponibles para todos los componentes <Consumer> */\n  }\n\n}\n\nexport { Consumer, withAuth }; //  <--\tRECUERDA EXPORTAR  ! ! !\n\nexport default AuthProvider; //\t<--\tRECUERDA EXPORTAR  ! ! !","map":{"version":3,"sources":["/Users/migueldominguezchamorro/Desktop/TindEvent/TindEvent-front/my-app/src/lib/AuthProvider.js"],"names":["React","auth","Consumer","Provider","createContext","withAuth","WrappedComponent","Component","render","login","signup","user","logout","isLoggedin","props","AuthProvider","state","isLoading","picture","username","email","password","location","birthDate","bio","then","setState","catch","response","message","data","statusMessage","err","console","log","componentDidMount","me","children"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport auth from \"./auth-service\"; // Importamos funciones para llamadas axios a la API\nconst { Consumer, Provider } = React.createContext();\n\n// HOC para crear Consumer\n// el componente withAuth recibe un componente como argumento y nos devuelve un componente con el mismo componente dentro de un <Consumer /> con las propiedades user e isLoggedin (state), y los métodos login, signup y logout (this)\nconst withAuth = (WrappedComponent) => {\n  return class extends React.Component {\n    render() {\n      return (\n        <Consumer>\n          {/* El componente <Consumer> provee un callback que recibe el \"value\" con el objeto Providers */}\n          {({ login, signup, user, logout, isLoggedin }) => {\n            return (\n              <WrappedComponent\n                login={login}\n                signup={signup}\n                user={user}\n                logout={logout}\n                isLoggedin={isLoggedin}\n                {...this.props}\n              />\n            );\n          }}\n        </Consumer>\n      );\n    }\n  };\n};\n\n// Provider\nclass AuthProvider extends React.Component {\n  state = { isLoggedin: false, user: null, isLoading: true };\n\n  componentDidMount() {\n    // luego de que se monte el componente, llama a auth.me() que nos devuelve el usuario y setea los valores para loguearlo\n    auth\n      .me()\n      .then((user) =>\n        this.setState({ isLoggedin: true, user: user, isLoading: false })\n      )\n      .catch((err) =>\n        this.setState({ isLoggedin: false, user: null, isLoading: false })\n      );\n  }\n\n  signup = (user) => {\n    const { picture, username, email, password, location, birthDate, bio  } = user;\n\n    auth\n      .signup({ picture, username, email, password, location, birthDate, bio })\n      .then((user) => {\n        this.setState({ isLoggedin: true, user })\n      })\n      .catch(({ response }) => {\n      \n        this.setState({ message: response.data.statusMessage })\n      });\n  };\n\n  login = (user) => {\n    const { username, password } = user;\n\n    auth\n      .login({ username, password })\n      .then((user) => this.setState({ isLoggedin: true, user }))\n      .catch((err) => console.log(err));\n  };\n\n  logout = () => {\n    auth\n      .logout()\n      .then(() => this.setState({ isLoggedin: false, user: null }))\n      .catch((err) => console.log(err));\n  };\n\n  render() {\n    // destructuramos isLoading, isLoggedin y user de this.state y login, logout y signup de this\n    const { isLoading, isLoggedin, user } = this.state;\n    const { login, logout, signup } = this;\n\n    return isLoading ? (\n      // si está loading, devuelve un <div> y sino devuelve un componente <Provider> con un objeto con los valores: { isLoggedin, user, login, logout, signup}\n      // el objeto pasado en la prop value estará disponible para todos los componentes <Consumer>\n      <div>Loading</div>\n    ) : (\n      <Provider value={{ isLoggedin, user, login, logout, signup }}>\n        {this.props.children}\n      </Provider>\n    ); /*<Provider> \"value={}\" datos que estarán disponibles para todos los componentes <Consumer> */\n  }\n}\n\nexport { Consumer, withAuth }; //  <--\tRECUERDA EXPORTAR  ! ! !\n\nexport default AuthProvider; //\t<--\tRECUERDA EXPORTAR  ! ! !\t\t"]},"metadata":{},"sourceType":"module"}